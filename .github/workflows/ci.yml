# This is a basic workflow to help you get started with Actions

name: "build and test"

# Controls when the workflow will run
on:
  push:
    branches: [ "**" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# We need to comment coverage information
permissions:
  pull-requests: write

# Make sure there's only one ci triggerd for a non-master branch
concurrency:
  group: ${{ github.ref }} 
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Set up OCaml
      # You may pin to the exact commit or the version.
      # uses: ocaml/setup-ocaml@d7a282f504fcdd7b9dc7e0ea3f39466c2946b24d
        uses: ocaml/setup-ocaml@v2.2.4
        with:
            # The OCaml compiler packages to initialise.
            ocaml-compiler: 5.2.0
            # The name and URL pair of the repository to fetch the packages from.
      
      - name: Install menhir
        run: opam install menhir

      - name: "Install OPAM dependencies"
        run: opam install . --deps-only          

      - name: "Build whole project"
        run: opam exec -- dune build

      - name: "Check format"
        run: opam exec -- dune build @fmt

      - name: Run tests
        run: opam exec -- dune runtest

      - name: Test with coverage instrumentation
        run: |
             mkdir $BISECT_DIR
             opam exec -- dune runtest --instrument-with bisect_ppx --force
             opam exec -- bisect-ppx-report summary --per-file --coverage-path=$BISECT_DIR >> $GITHUB_STEP_SUMMARY
             opam exec -- bisect-ppx-report cobertura cobertura.xml --coverage-path=$BISECT_DIR
        env:
          BISECT_DIR: ${{ runner.temp }}/_coverage
          BISECT_FILE: ${{ runner.temp }}/_coverage/bisect_data

      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: cobertura.xml
          badge: true
          output: both
          format: markdown

      - uses: jwalton/gh-find-current-pr@v1
        id: finder
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ steps.finder.outputs.pr }}
          hide: true
          hide_classify: "OUTDATED"
          path: code-coverage-results.md